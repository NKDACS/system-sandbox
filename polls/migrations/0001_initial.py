# Generated by Django 3.1.5 on 2021-01-30 20:08

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import polls.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('number', models.IntegerField(blank=True, null=True, verbose_name='工号/学号')),
                ('phone', models.CharField(blank=True, max_length=11, validators=[django.core.validators.MinLengthValidator(11, '请输入11位有效电话')], verbose_name='电话')),
                ('person_id', models.CharField(blank=True, max_length=18, null=True, unique=True, validators=[polls.utils.IDValidator], verbose_name='身份证号')),
                ('first_name', models.CharField(max_length=32, verbose_name='名字')),
                ('last_name', models.CharField(max_length=32, verbose_name='姓氏')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Resume',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('university', models.CharField(blank=True, choices=[('天津', [('4112010055', '南开大学')]), ('北京', [('4111010003', '清华大学'), ('4111010001', '北京大学'), ('4111010007', '北京理工大学')])], max_length=16, verbose_name='学校')),
                ('school', models.CharField(blank=True, max_length=16, verbose_name='学院')),
                ('major', models.CharField(blank=True, max_length=16, verbose_name='本科主修专业')),
                ('gpa', models.FloatField(blank=True, null=True, verbose_name='平均学分绩')),
                ('rank', models.SmallIntegerField(blank=True, null=True, verbose_name='本科专业内学分绩排名')),
                ('major_student_amount', models.IntegerField(blank=True, null=True, verbose_name='本科专业总人数')),
                ('cet6', models.BooleanField(default=False, verbose_name='是否通过CET6')),
                ('other_prize_penalty', models.TextField(blank=True, max_length=1024, verbose_name='其他奖励惩罚')),
                ('others', models.TextField(blank=True, max_length=1024, verbose_name='备注')),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='学生账号')),
            ],
            options={
                'verbose_name': '简历',
            },
        ),
    ]
